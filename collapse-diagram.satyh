@require: class-slydifi/theme/arctic
@require: class-slydifi/slydifi
@require: ruby/ruby
@require: easytable/easytable
@require: bibyfi/bibyfi
@require: bibyfi/bibyfi-IEEETran
@require: azmath/azmath
@require: matrix/matrix
@require: colorbox/colorbox
@require: arrows/arrows
@require: arrows/commands
@require: fss/fss
@require: fss/fonts
@require: latexcmds/latexcmds
@require: fss/style
@require: base/list-ext
@require: enumitem/enumitem
@require: figbox/figbox
@require: arrows/arrows
@require: base/list-ext
@require: colorbox/colorbox
@require: bibyfi/bibyfi
@require: annot
@import: tikzyfi
@import: utils
@import: macros

module Collapse : sig
  val diagram: int -> TikZyFi.element list
  type ordinal
  type universe
  type presense
  val make: universe list -> ordinal list -> int -> TikZyFi.element list
end = struct
  open Utils
  open TikZyFi
  open List

  
  type presense = 
      | Sticky
      | BecomesOmega1 of int * int option
      | Destroyed of int
  type ordinal = Ordinal of string * math * length * presense
  type universe = Universe of string * math * length

  let draw-universe: universe -> element list =
    fun (Universe (name, univ, x)) ->
      (let on = name ^ `-On` in
        [ node-at ?:[named name] (coord (x, 0cm)) {${#univ}}
        ; node-at ?:[named on] (coord (x, 10cm)) {${\On}}
        ; arrow (north-of name) (south-of on)
        ]
      )
  
  let default-universes: universe list =
    [ Universe (`V`, ${V}, -5cm)
    ; Universe (`V-Glam`, ${V[G \restr \lambda]}, 0cm)
    ; Universe (`V-G`, ${V[G]}, 5cm)
    ]
  
  let default-ordinals: ordinal list =
    [ Ordinal (`omega`, ${\omega}, 1.5cm, Sticky) 
    ; Ordinal (`omega1`, ${\omega_1^V}, 2.5cm, Destroyed 1)
    ; Ordinal (`omega2`, ${\omega_2^V}, 3.5cm, Destroyed 1)
    ; Ordinal (`lambda`, ${\lambda}, 6.0cm, BecomesOmega1 (1, Some 2))
    ; Ordinal (`lambda-pow`, ${(2^\lambda)^V}, 7.0cm, Destroyed 2)
    ; Ordinal (`kappa`, ${\kappa}, 8.75cm, BecomesOmega1 (2, None))
    ]

  let destroy-level p = match p with
    | Sticky -> None
    | Destroyed i -> Some i
    | BecomesOmega1 (_, i) -> i

  let becomes-omega-1 p = match p with
    | BecomesOmega1 (i, _) -> Some i
    | _ -> None

  type target = 
    | Concrete of string
    | Below of string

  let make univs ords layer =
    concat 
      [ concat-mapi
          (fun i (Universe (univ-name, _, x))->
            ( let is-phantom = layer < 2 * (i - 1) + 2 in
              let coll-targs = 
                    map-maybe 
                      (fun (Ordinal (oname, _, _, p)) -> 
                        Option.or
                          (Option.map (fun _ -> Concrete (univ-name ^ `-` ^ oname))
                            (filter-option
                            (fun l -> i == l && layer == 2 * (l - 1) + 2)
                            (destroy-level p))
                          )
                          (Option.map (fun _ -> Below (univ-name ^ `-` ^ oname))
                            (filter-option
                            (fun l -> i == l && layer == 2 * (l - 1) + 2)
                            (becomes-omega-1 p)
                            )
                          )
                      )
                      ords
              in 
              let num-colls = List.length coll-targs in
              let omega-name = univ-name ^ `-omega` in
              concat 
                [concat-mapi (fun j (Ordinal (ord-name, ord, y, presense)) -> (
                  let start-layer = Int.max (2 * (i - 1) + 2) 0 in
                  let name = univ-name ^ `-` ^ ord-name in
                  let col = 
                    if i == 0 || layer < start-layer || Option.map-or true (fun l -> i < l) (destroy-level presense)
                    then Color.black
                    else emph-color
                  in 
                  let is-phantom = is-phantom || Option.map-or false (fun l -> i >= l && layer >= 2 * l + 1) (destroy-level presense)  in
                  let is-omega-1 = 
                      not is-phantom &&
                      Option.map-or true 
                        (fun l -> 2 * (l - 1) + 3 <= layer && i >= l
                        && Option.map-or true (fun d -> i < d) (destroy-level presense)) 
                        ( becomes-omega-1 presense)
                        
                        in
                  let memori = polyline ?:[pc col; phantom is-phantom] (map coord [(x -' 5pt, y); (x +' 5pt, y)]) in
                  let ord-node = node-at ?:[named name; tc col; phantom is-phantom] (coord (x +' 7mm, y -' 4pt)) {\small{${#ord}}} in
                  let omega1-node = 
                      Option.to-list 
                        (Option.map 
                          (fun l -> 
                            (let om-1-uni = 
                                  Option.map-or ${} (fun (Universe(_, u, _)) -> u) (List.nth l univs )
                              in node-at ?:[phantom (not is-omega-1)] (move-to (east-of name) (2pt, -2pt)) {\small{${ = \omega_1^{#om-1-uni}}}}
                            )
                          )
                          (becomes-omega-1 presense) 
                        )
                  in concat [[memori]; [ord-node]; omega1-node]
                ))
                ords
              ; concat-mapi
                  (fun i dest -> (
                    let self = match dest with
                          | Concrete oname -> east-of oname
                          | Below oname -> move-to (south-west-of oname) (-2pt, -5mm)
                    in let self-inner = move-to self (3pt, 0pt) in
                    let omega =
                      between ?:(float i /. float (num-colls - 1)) 
                        (move-to (north-east-of omega-name) (0pt, -2pt))
                        (move-to (south-east-of omega-name) (0pt,  2pt))
                      in
                    let rd = move-to omega (5.5mm *' (float i +. 1.), 0pt) in
                    let ru = proj self (rd, move-to rd (0pt, -1pt))
                        in
                    [ polyline?:[pc emph-color; lw 1pt] 
                        [omega; rd; ru; self]
                    ; polyline?:[pc emph-color; lw 1pt]
                        [move-to self (4pt, -4pt); self; move-to self (4pt, 4pt)]
                    ; polyline?:[pc emph-color; lw 1pt]
                        [move-to self-inner (4pt, -4pt); self-inner; move-to self-inner (4pt, 4pt)]
                    ]
                  ))
                  coll-targs
              ]
        ))
        univs
      ; concat-mapi
        (fun i univ -> (
          if layer >= 2 * (i - 1) + 2
            then draw-universe univ
            else []
        )) default-universes
      ]

  let diagram = make default-universes default-ordinals
end
